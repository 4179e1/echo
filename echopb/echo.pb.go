// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echo.proto

package echopb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EchoRequest struct {
	Index                int32    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_08134aea513e0001, []int{0}
}

func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRequest.Unmarshal(m, b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
}
func (m *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(m, src)
}
func (m *EchoRequest) XXX_Size() int {
	return xxx_messageInfo_EchoRequest.Size(m)
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *EchoRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type EchoReply struct {
	Index                int32    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoReply) Reset()         { *m = EchoReply{} }
func (m *EchoReply) String() string { return proto.CompactTextString(m) }
func (*EchoReply) ProtoMessage()    {}
func (*EchoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_08134aea513e0001, []int{1}
}

func (m *EchoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoReply.Unmarshal(m, b)
}
func (m *EchoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoReply.Marshal(b, m, deterministic)
}
func (m *EchoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoReply.Merge(m, src)
}
func (m *EchoReply) XXX_Size() int {
	return xxx_messageInfo_EchoReply.Size(m)
}
func (m *EchoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoReply.DiscardUnknown(m)
}

var xxx_messageInfo_EchoReply proto.InternalMessageInfo

func (m *EchoReply) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *EchoReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "echopb.EchoRequest")
	proto.RegisterType((*EchoReply)(nil), "echopb.EchoReply")
}

func init() { proto.RegisterFile("echo.proto", fileDescriptor_08134aea513e0001) }

var fileDescriptor_08134aea513e0001 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4d, 0xce, 0xc8,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0xb1, 0x0b, 0x92, 0xa4, 0x64, 0xd2, 0xf3,
	0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b,
	0x32, 0xf3, 0xf3, 0x8a, 0x21, 0xaa, 0x94, 0x4c, 0xb9, 0xb8, 0x5d, 0x93, 0x33, 0xf2, 0x83, 0x52,
	0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x33, 0xf3, 0x52, 0x52, 0x2b, 0x24, 0x18,
	0x15, 0x18, 0x35, 0x58, 0x83, 0x20, 0x1c, 0x21, 0x01, 0x2e, 0xe6, 0xdc, 0xe2, 0x74, 0x09, 0x26,
	0x05, 0x46, 0x0d, 0xce, 0x20, 0x10, 0x53, 0xc9, 0x98, 0x8b, 0x13, 0xa2, 0xad, 0x20, 0xa7, 0x92,
	0x58, 0x4d, 0x46, 0xe7, 0x99, 0x20, 0x96, 0x05, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0xf9,
	0x70, 0xb1, 0x80, 0xb8, 0x42, 0xc2, 0x7a, 0x10, 0xa7, 0xea, 0x21, 0xb9, 0x44, 0x4a, 0x10, 0x55,
	0xb0, 0x20, 0xa7, 0x52, 0x49, 0xa6, 0xe9, 0xf2, 0x93, 0xc9, 0x4c, 0x62, 0x4a, 0x82, 0xfa, 0x20,
	0x29, 0xb0, 0x87, 0xca, 0x0c, 0xc1, 0x6c, 0x2b, 0x46, 0x2d, 0xa1, 0x00, 0x2e, 0xd6, 0x90, 0xa2,
	0xcc, 0x64, 0xe2, 0x8d, 0x93, 0x05, 0x1b, 0x27, 0xae, 0x24, 0x84, 0x62, 0x5c, 0x09, 0xc8, 0x0c,
	0x2b, 0x46, 0x2d, 0x03, 0x46, 0x21, 0x3f, 0x2e, 0x96, 0xe0, 0xcc, 0xbc, 0x6c, 0x0a, 0xdd, 0x57,
	0x9c, 0x99, 0x97, 0x6d, 0xc5, 0xa8, 0xa5, 0xc1, 0x28, 0x14, 0xc0, 0xc5, 0xe2, 0x9c, 0x91, 0x58,
	0x42, 0xa1, 0x79, 0xc9, 0x19, 0x89, 0x25, 0x60, 0xf3, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0x91, 0x68,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x01, 0xaf, 0x70, 0xf8, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoServiceClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error)
	Trico(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (EchoService_TricoClient, error)
	Sink(ctx context.Context, opts ...grpc.CallOption) (EchoService_SinkClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (EchoService_ChatClient, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error) {
	out := new(EchoReply)
	err := c.cc.Invoke(ctx, "/echopb.EchoService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) Trico(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (EchoService_TricoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EchoService_serviceDesc.Streams[0], "/echopb.EchoService/Trico", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceTricoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoService_TricoClient interface {
	Recv() (*EchoReply, error)
	grpc.ClientStream
}

type echoServiceTricoClient struct {
	grpc.ClientStream
}

func (x *echoServiceTricoClient) Recv() (*EchoReply, error) {
	m := new(EchoReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) Sink(ctx context.Context, opts ...grpc.CallOption) (EchoService_SinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EchoService_serviceDesc.Streams[1], "/echopb.EchoService/Sink", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceSinkClient{stream}
	return x, nil
}

type EchoService_SinkClient interface {
	Send(*EchoRequest) error
	CloseAndRecv() (*EchoReply, error)
	grpc.ClientStream
}

type echoServiceSinkClient struct {
	grpc.ClientStream
}

func (x *echoServiceSinkClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceSinkClient) CloseAndRecv() (*EchoReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (EchoService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EchoService_serviceDesc.Streams[2], "/echopb.EchoService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceChatClient{stream}
	return x, nil
}

type EchoService_ChatClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoReply, error)
	grpc.ClientStream
}

type echoServiceChatClient struct {
	grpc.ClientStream
}

func (x *echoServiceChatClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceChatClient) Recv() (*EchoReply, error) {
	m := new(EchoReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServiceServer is the server API for EchoService service.
type EchoServiceServer interface {
	Echo(context.Context, *EchoRequest) (*EchoReply, error)
	Trico(*EchoRequest, EchoService_TricoServer) error
	Sink(EchoService_SinkServer) error
	Chat(EchoService_ChatServer) error
}

// UnimplementedEchoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEchoServiceServer struct {
}

func (*UnimplementedEchoServiceServer) Echo(ctx context.Context, req *EchoRequest) (*EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedEchoServiceServer) Trico(req *EchoRequest, srv EchoService_TricoServer) error {
	return status.Errorf(codes.Unimplemented, "method Trico not implemented")
}
func (*UnimplementedEchoServiceServer) Sink(srv EchoService_SinkServer) error {
	return status.Errorf(codes.Unimplemented, "method Sink not implemented")
}
func (*UnimplementedEchoServiceServer) Chat(srv EchoService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_Trico_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServiceServer).Trico(m, &echoServiceTricoServer{stream})
}

type EchoService_TricoServer interface {
	Send(*EchoReply) error
	grpc.ServerStream
}

type echoServiceTricoServer struct {
	grpc.ServerStream
}

func (x *echoServiceTricoServer) Send(m *EchoReply) error {
	return x.ServerStream.SendMsg(m)
}

func _EchoService_Sink_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).Sink(&echoServiceSinkServer{stream})
}

type EchoService_SinkServer interface {
	SendAndClose(*EchoReply) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceSinkServer struct {
	grpc.ServerStream
}

func (x *echoServiceSinkServer) SendAndClose(m *EchoReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceSinkServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EchoService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).Chat(&echoServiceChatServer{stream})
}

type EchoService_ChatServer interface {
	Send(*EchoReply) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceChatServer struct {
	grpc.ServerStream
}

func (x *echoServiceChatServer) Send(m *EchoReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceChatServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echopb.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Trico",
			Handler:       _EchoService_Trico_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sink",
			Handler:       _EchoService_Sink_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _EchoService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "echo.proto",
}
